import os
import streamlit as st
import requests
import base64
from email.mime.text import MIMEText
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle

# If modifying these SCOPES, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/gmail.send']

OLLAMA_API_URL = "http://localhost:11434/v1/chat/completions"
OLLAMA_MODEL = "llama3"

def get_gmail_service():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)
    service = build('gmail', 'v1', credentials=creds)
    return service

def generate_email(subject, description):
    prompt = f"Write an email using simple language with the subject: '{subject}'. Description: {description}"
    payload = {
        "model": OLLAMA_MODEL,
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }
    try:
        response = requests.post(OLLAMA_API_URL, json=payload)
        response.raise_for_status()
        data = response.json()
        content = data["choices"][0]["message"]["content"]
        if content is not None:
            return content.strip()
        else:
            return "Error: No content generated by Ollama."
    except Exception as e:
        return f"Error generating email: {e}"

def send_email(to, subject, body):
    message = MIMEText(body, 'plain')
    message['to'] = to
    message['subject'] = subject
    raw = base64.urlsafe_b64encode(message.as_bytes()).decode()
    service = get_gmail_service()
    try:
        message = service.users().messages().send(userId="me", body={"raw": raw}).execute()
        return True, f"Message Id: {message['id']}"
    except Exception as e:
        return False, str(e)

def main():
    st.set_page_config(page_title="AI Email Sender", layout="centered")
    st.title("AI Email Sender (Ollama)")
    st.write("Fill in the details below, generate your email, review/edit, and send!")

    with st.form("email_form"):
        to = st.text_input("Recipient Email")
        subject = st.text_input("Subject")
        description = st.text_area("Description", height=80)
        generate_clicked = st.form_submit_button("Generate Email")

    if 'body' not in st.session_state:
        st.session_state['body'] = ''

    if generate_clicked:
        if not subject or not description:
            st.error("Please enter both subject and description.")
        else:
            with st.spinner("Generating email..."):
                st.session_state['body'] = generate_email(subject, description)

    body = st.text_area("Email Body", value=st.session_state['body'], height=300, key="body_area")

    if st.button("Send Email"):
        if not to or not subject or not body:
            st.error("Please fill in all fields before sending.")
        else:
            with st.spinner("Sending email..."):
                success, msg = send_email(to, subject, body)
                if success:
                    st.success(f"Email sent! {msg}")
                else:
                    st.error(f"Failed to send email: {msg}")

if __name__ == "__main__":
    main() 